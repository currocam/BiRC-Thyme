rule all: 
    input: 
        "results/qc/fastqc/THYME_607L_hifi.html",
        "results/qc/longqc/THYME_607L_hifi",
        "results/filtered/THYME_607L_hifi_best_1_perc.fastq.gz",
        "results/aligned/GCA_024222315.1_ASM2422231v1_genomic_aln_best_1_perc.sorted.bam",
        "results/summary/cov_5_perc.csv",
        "results/summary/zeros_5_perc.csv"

rule summary_notebook:
    input:
        "results/aligned/chr_aln_best_5_perc.sorted.bam",
        "results/aligned/GCA_024222315.1_ASM2422231v1_genomic_aln_best_1_perc.sorted.bam"
    output:
        "results/summary/cov_5_perc.csv",
        "results/summary/cov_1_perc.csv",
        "results/summary/count_5_perc.csv",
        "results/summary/count_1_perc.csv",
    conda: 
        "envs/pysam.yaml"
    log:
        # optional path to the processed notebook
        notebook="logs/notebooks/summary_notebook.ipynb"
    notebook:
        "notebooks/01-extract_reads_from_best_1_perc_to_table/pysam_processing.py.ipynb"

rule summary_notebook_zeros:
    input:
        "results/aligned/chr_aln_best_5_perc.sorted.bam",
        "results/aligned/GCA_024222315.1_ASM2422231v1_genomic_aln_best_1_perc.sorted.bam"
    output:
        "results/summary/zeros_5_perc.csv",
        "results/summary/zeros_1_perc.csv",
    conda: 
        "envs/pysam.yaml"
    log:
        # optional path to the processed notebook
        notebook="logs/notebooks/summary_notebook_count.ipynb"
    notebook:
        "notebooks/01-extract_reads_from_best_1_perc_to_table/pysam_processing_count.py.ipynb"

rule fastqc:
    input:
        "reads/{sample}.fastq.gz"
    output:
        html="results/qc/fastqc/{sample}.html",
        zip="results/qc/fastqc/{sample}_fastqc.zip" # the suffix _fastqc.zip is necessary for multiqc to find the file. If not using multiqc, you are free to choose an arbitrary filename
    params: "--quiet"
    log:
        "logs/fastqc/{sample}.log"
    threads: 1
    wrapper:
        "v1.22.0/bio/fastqc"


rule longqc:
    input: 
        "reads/{sample}.fastq.gz"
    output:
        qc = directory("results/qc/longqc/{sample}"),
        trimmed = "results/trimmed/{sample}.fastq"
    params: "-x pb-hifi"
    log:
        "logs/longqc/{sample}.log"
    benchmark: 
        "benchmarks/longqc/{sample}.log"
    threads: 4
    container:
        "docker://grpiccolils/longqc"
    shell:
        "longQC sampleqc {input} "
        "-p {threads} {params} "
        "-o {output.qc} -c {output.trimmed} 2> {log}"

rule filtlong:
    input:
        "results/trimmed/{sample}.fastq"
    output:
        "results/filtered/{sample}_best_{percentage}_perc.fastq.gz"
    conda: 
        "envs/filtlong.yaml"
    benchmark: 
        "benchmarks/filtlong/{sample}_{percentage}.log"
    shell: 
        "filtlong --keep_percent {wildcards.percentage} {input} | gzip > {output}"


rule minimap2_index_reference_genome:
    input:
        target="external_data/{input1}.fna.gz"
    output:
        "results/minimap2_index/{input1}.mmi"
    log:
        "logs/minimap2_index/{input1}.log"
    params:
        extra=""  # no optional additional args
    threads: 3
    wrapper:
        "v1.23.1/bio/minimap2/index"


rule minimap2_bam_sorted_best_1_perc:
    input:
        target="results/minimap2_index/{input1}.mmi",  # can be either genome index or genome fasta
        query="results/filtered/THYME_607L_hifi_best_1_perc.fastq.gz",
    output:
        "results/aligned/{input1}_aln_best_1_perc.sorted.bam",
    log:
        "logs/minimap2/{input1}.log",
    params:
        extra="-x map-hifi",  # optional
        sorting="coordinate",  # optional: Enable sorting. Possible values: 'none', 'queryname' or 'coordinate'
        sort_extra="",  # optional: extra arguments for samtools/picard
    threads: 3
    wrapper:
        "v1.23.1/bio/minimap2/aligner"